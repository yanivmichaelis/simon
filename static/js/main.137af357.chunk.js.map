{"version":3,"sources":["components/sounds/simonSound1.mp3","components/sounds/simonSound2.mp3","components/sounds/simonSound3.mp3","components/sounds/simonSound4.mp3","components/Button.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","typeMap","1","color","position","2","3","4","Button","_ref","_cn","type","onClick","clicked","style","cn","Object","defineProperty","concat","react_default","a","createElement","className","event","USER","SIMON","FAILURE","Board","state","simonClicks","userClicks","mute","player","timer","timerSimon","timerPlayerChange","simonSays","_this","setState","next","Math","floor","random","push","playSimonMoves","i","_this$state","intervalId","setInterval","select","length","clearInterval","setTimeout","console","log","userSays","index","_this$state2","reset","playSound","document","getElementById","play","diselect","toggleMute","_this2","this","_this$state3","currentPlayer","user-icon","simon-icon","failure-icon","Fragment","map","id","components_Button","key","src","sound1","sound2","sound3","sound4","React","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.137af357.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/simonSound1.319c7710.mp3\";","module.exports = __webpack_public_path__ + \"static/media/simonSound2.c3c86e71.mp3\";","module.exports = __webpack_public_path__ + \"static/media/simonSound3.f3c18b98.mp3\";","module.exports = __webpack_public_path__ + \"static/media/simonSound4.f4a912ee.mp3\";","import React from 'react';\nimport cn from 'classnames';\n\n// sounds from: https://www.freecodecamp.org/forum/t/external-mp3-audio-files/18450/2\n\nconst typeMap = {\n  1: {\n    color: \"red\",\n    position: \"top-left\",\n  },\n  2: {\n    color: \"yellow\",\n    position: \"top-right\",\n  },\n  3: {\n    color: \"green\",\n    position: \"bottom-left\",\n  },\n  4: {\n    color: \"blue\",\n    position: \"bottom-right\",\n  },\n}\n\nfunction Button({ type, onClick, clicked }) {\n  const style = cn('button', {\n    [`${typeMap[type].position}`]: true,\n    [`${typeMap[type].color}`]: !clicked,\n    [`${typeMap[type].color}-clicked`]: clicked,\n  });\n\n  return (\n    <div className={style} onClick={(event) => onClick()} />\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport cn from 'classnames';\n\nimport Button from './Button';\nimport sound1 from './sounds/simonSound1.mp3'\nimport sound2 from './sounds/simonSound2.mp3'\nimport sound3 from './sounds/simonSound3.mp3'\nimport sound4 from './sounds/simonSound4.mp3'\n\nconst USER = 'user';\nconst SIMON = 'simon';\nconst FAILURE = 'failure';\n\nclass Board extends React.Component {\n  state = {\n    clicked: 0,\n    simonClicks: [],\n    userClicks: 0,\n    mute: true,\n    player: 'simon',\n\n    // The sounds are not the same length - so we need to support the longest sound (4/blue)\n    timer: 200, // 450ms, time to show clicked\n    timerSimon: 400, // 650ms, time between simon clicks\n    timerPlayerChange: 600, //1000ms\n  }\n\n  simonSays = () => {\n    // TODO: disable user clicks\n    const { simonClicks } = this.state;\n    this.setState({player: SIMON});\n    const next = Math.floor(Math.random()*4+1);\n    simonClicks.push(next);\n\n    this.playSimonMoves();\n    // TODO: enable user clicks\n  }\n\n  playSimonMoves = () => {\n    let i = 0;\n    const { simonClicks, timerSimon, timerPlayerChange } = this.state;\n    const intervalId = setInterval(() => {\n      this.select(simonClicks[i]);\n      i++;\n      if(i >= simonClicks.length) {\n        clearInterval(intervalId);\n        setTimeout(() => {\n          console.log('Users turn');\n          this.setState({userClicks: 0, player: USER})\n        }, timerPlayerChange);\n      }\n    }, timerSimon);\n  }\n\n  userSays = (index) => {\n    const { userClicks, simonClicks, timerPlayerChange } = this.state;\n    this.select(index);\n\n    if(index !== simonClicks[userClicks]) {\n      console.log('FAILURE ');\n      this.setState({player: FAILURE});\n      this.reset();\n      // TODO: disable user clicks\n      // TODO: change icon to failure\n    } else {\n      console.log('Correct ');\n      this.setState({userClicks: userClicks + 1})\n\n      // console.log('index :', index);\n      // console.log('userClicks :', userClicks);\n      // console.log('simonClicks.length :', simonClicks.length);\n      // on change state? / componentDidChange\n      if (userClicks + 1 === simonClicks.length) {\n        // TODO: disable user clicks\n        // TODO: change icon to simon\n        setTimeout(() => {\n          console.log('Simons turn');\n          this.setState({player: SIMON});\n          this.simonSays();\n        }, timerPlayerChange)\n      }\n    }\n  }\n\n  playSound = (type) => {\n    // const playPromise = document.getElementById(`simon${type}`).play();\n    // playPromise.then().catch();\n\n    // OR sound = new Audio(mp3).play()\n    if (!this.state.mute) {\n      document.getElementById(`simon${type}`).play();\n    }\n  }\n\n  select = (index) => {\n    this.playSound(index);\n    this.setState(({clicked: index}), this.diselect );\n  }\n\n  diselect = () => {\n    return setTimeout(() => this.setState({clicked: 0}), this.state.timer);\n  }\n  toggleMute = () => {\n    return this.setState( {mute: !this.state.mute} );\n  }\n  reset = () => {\n    return this.setState({simonClicks: [], userClicks: 0});\n  }\n\n  render() {\n    const { simonClicks, mute, player } = this.state;\n    const currentPlayer =  cn({\n      'user-icon': player === USER,\n      'simon-icon': player === SIMON,\n      'failure-icon': player === FAILURE,\n    });\n\n    return <>\n      <div className=\"Board\">\n        {[1,2,3,4].map((id) =>\n          <Button\n            key={id + ':' + id}\n            type={id}\n            onClick={() => this.userSays(id) }\n            clicked={this.state.clicked === id}\n          />)\n        }\n      </div>\n      <div className=\"score\">\n        Score {simonClicks.length}\n      </div>\n\n      <div className=\"controls\">\n        <div className=\"start\" onClick={this.simonSays} />\n        <div className=\"turn\">\n          Playing now: <div className={currentPlayer}/>\n        </div>\n        <div className=\"sound\">\n          {/* <div className={cn({mute: mute, speaker: !mute,})} onClick={() => this.toggleMute()} /> */}\n          <audio id=\"simon1\"><source src={sound1} type=\"audio/mpeg\" /></audio>\n          <audio id=\"simon2\"><source src={sound2} type=\"audio/mpeg\" /></audio>\n          <audio id=\"simon3\"><source src={sound3} type=\"audio/mpeg\" /></audio>\n          <audio id=\"simon4\"><source src={sound4} type=\"audio/mpeg\" /></audio>\n        </div>\n      </div>\n\n\n    </>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}