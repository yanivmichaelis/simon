{"version":3,"sources":["components/sounds/simonSound1.mp3","components/sounds/simonSound2.mp3","components/sounds/simonSound3.mp3","components/sounds/simonSound4.mp3","components/Button.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","typeMap","1","color","position","2","3","4","Button","_ref","_cn","type","onClick","clicked","style","cn","Object","defineProperty","concat","react_default","a","createElement","className","event","USER","SIMON","FAILURE","timer","timerSimon","timerChangePlayerTurn","Board","_useState","useState","_useState2","slicedToArray","setClicked","_useState3","_useState4","simonClicks","setSimonClicks","_useState5","_useState6","userClicks","setUserClicks","_useState7","_useState8","topScore","settopScore","_useState9","_useState10","mute","_useState11","_useState12","player","setPlayer","simonSays","next","Math","floor","random","userSays","index","numberOfMovers","length","reset","setTimeout","useEffect","document","getElementById","play","i","intervalId","setInterval","clearInterval","console","log","Fragment","map","id","components_Button","key","src","sound1","sound2","sound3","sound4","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d79eca6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/simonSound1.319c7710.mp3\";","module.exports = __webpack_public_path__ + \"static/media/simonSound2.c3c86e71.mp3\";","module.exports = __webpack_public_path__ + \"static/media/simonSound3.f3c18b98.mp3\";","module.exports = __webpack_public_path__ + \"static/media/simonSound4.f4a912ee.mp3\";","import React from 'react';\nimport cn from 'classnames';\nimport './Button.css'\n\n// sounds from: https://www.freecodecamp.org/forum/t/external-mp3-audio-files/18450/2\n\nconst typeMap = {\n  1: {\n    color: \"red\",\n    position: \"top-left\",\n  },\n  2: {\n    color: \"yellow\",\n    position: \"top-right\",\n  },\n  3: {\n    color: \"green\",\n    position: \"bottom-left\",\n  },\n  4: {\n    color: \"blue\",\n    position: \"bottom-right\",\n  },\n}\n\nfunction Button({ type, onClick, clicked }) {\n  const style = cn('button', {\n    [`${typeMap[type].position}`]: true,\n    [`${typeMap[type].color}`]: !clicked,\n    [`${typeMap[type].color}-clicked`]: clicked,\n  });\n\n  return (\n    <div className={style} onClick={(event) => onClick()} />\n  );\n}\n\nexport default Button;\n","import React, { useState, useEffect } from 'react';\n// import cn from 'classnames';\n\nimport Button from './Button';\nimport sound1 from './sounds/simonSound1.mp3'\nimport sound2 from './sounds/simonSound2.mp3'\nimport sound3 from './sounds/simonSound3.mp3'\nimport sound4 from './sounds/simonSound4.mp3'\n\nconst USER = 'user';\nconst SIMON = 'simon';\nconst FAILURE = 'failure';\n\n// The sounds are not the same length - so we need to support the longest sound (4/blue)\nconst timer = 200;\nconst timerSimon = 450;\nconst timerChangePlayerTurn = 600;\n\nfunction Board() {\n  const [clicked, setClicked] = useState(0);\n  const [simonClicks, setSimonClicks] = useState([]);\n  const [userClicks, setUserClicks] = useState(0);\n  const [topScore, settopScore] = useState(0);\n  const [mute, setMute] = useState(true);\n  const [player, setPlayer] = useState(SIMON);\n\n  // Using a named function, to add context.\n  useEffect(deselectButton);\n\n  function deselectButton() {\n    playSound(clicked);\n    setTimeout(() => setClicked(0), timer);\n  }\n\n  useEffect(() => {\n    if(simonClicks.length > 0) {\n      let i = 0;\n      const intervalId = setInterval(() => {\n        setClicked(simonClicks[i]);\n        i++;\n        if(i >= simonClicks.length) {\n          clearInterval(intervalId);\n          setTimeout(() => {\n            console.log('Users turn');\n            setPlayer(USER);\n            setUserClicks(0);\n          }, timerChangePlayerTurn);\n        }\n      }, timerSimon);\n    }\n  }, [simonClicks]);\n\n  function simonSays() {\n    setPlayer(SIMON);\n    const next = Math.floor(Math.random()*4+1);\n    setSimonClicks(simonClicks.concat(next));\n  }\n\n  function userSays(index) {\n    setClicked(index);\n\n    if(index !== simonClicks[userClicks]) {\n      setPlayer(FAILURE);\n      reset();\n    } else {\n      setUserClicks(userClicks + 1);\n      if (userClicks + 1 === simonClicks.length) {\n        setTimeout(() => {\n          simonSays();\n        }, timerChangePlayerTurn)\n      }\n    }\n  }\n\n  function playSound(type) {\n    // const playPromise = document.getElementById(`simon${type}`).play();\n    // playPromise.then().catch();\n\n    // OR sound = new Audio(mp3).play()\n    if (!mute) {\n      document.getElementById(`simon${type}`).play();\n    }\n  }\n\n  function toggleMute() {\n    return setMute(!mute);\n  }\n  function reset() {\n    const numberOfMovers = simonClicks.length - 1;\n    if (numberOfMovers > topScore) {\n      settopScore(numberOfMovers);\n    }\n\n    setUserClicks(0);\n    return setSimonClicks([]);\n  }\n\n  return <>\n    <div className=\"Board\">\n      {[1,2,3,4].map((id) =>\n        <Button\n          key={id+ clicked + player}\n          type={id}\n          onClick={() => userSays(id) }\n          clicked={clicked === id}\n        />)\n      }\n    </div>\n    <div className=\"score\">\n      Score {simonClicks.length ? simonClicks.length - 1 : 0}\n    </div>\n    <div>\n      High Score: {topScore}\n    </div>\n    <div className=\"controls\">\n      <div className=\"start\" onClick={simonSays} />\n      <div className=\"turn\">\n        Turn: <div className={`${player}-icon`}/>\n      </div>\n      <div className=\"sound\">\n        {/* <div className={cn({mute: mute, speaker: !mute,})} onClick={() => toggleMute()} /> */}\n        <audio id=\"simon1\"><source src={sound1} type=\"audio/mpeg\" /></audio>\n        <audio id=\"simon2\"><source src={sound2} type=\"audio/mpeg\" /></audio>\n        <audio id=\"simon3\"><source src={sound3} type=\"audio/mpeg\" /></audio>\n        <audio id=\"simon4\"><source src={sound4} type=\"audio/mpeg\" /></audio>\n      </div>\n    </div>\n  </>;\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}